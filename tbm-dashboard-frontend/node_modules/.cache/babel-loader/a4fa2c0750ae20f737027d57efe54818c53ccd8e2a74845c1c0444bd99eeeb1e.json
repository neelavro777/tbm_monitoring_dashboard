{"ast":null,"code":"var _jsxFileName = \"E:\\\\bored tunnelers project\\\\tbm-dashboard\\\\src\\\\components\\\\TemperatureDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ROSLIB from 'roslib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperatureDisplay = () => {\n  _s();\n  const [temperatures, setTemperatures] = useState({});\n  const rosRef = useRef(null);\n  const staleThreshold = 5000; // 5 seconds threshold for considering data as stale\n\n  useEffect(() => {\n    const connectToROS = () => {\n      if (rosRef.current) {\n        rosRef.current.close();\n      }\n      const ros = new ROSLIB.Ros({\n        url: 'ws://192.168.0.193:9090'\n      });\n      ros.on('connection', () => {\n        console.log('Connected to websocket server.');\n        rosRef.current = ros;\n        subscribeToTopics();\n      });\n      ros.on('error', error => {\n        console.log('Error connecting to websocket server: ', error);\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\n      });\n      ros.on('close', () => {\n        console.log('Connection to websocket server closed.');\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\n      });\n    };\n    const subscribeToTopics = () => {\n      const topics = ['/temperature_1', '/temperature_2']; // Add more as needed\n      topics.forEach(topic => {\n        const subscriber = new ROSLIB.Topic({\n          ros: rosRef.current,\n          name: topic,\n          messageType: 'std_msgs/Float32'\n        });\n        subscriber.subscribe(message => {\n          console.log(`Received data for ${topic}:`, message.data); // Log incoming data\n          console.log('Current temperatures state before update:', temperatures);\n          setTemperatures(prevTemps => {\n            const updatedTemps = {\n              ...prevTemps,\n              [topic]: {\n                value: message.data,\n                lastUpdated: Date.now()\n              }\n            };\n            console.log('Updated temperatures state:', updatedTemps); // Log updated state\n            return updatedTemps;\n          });\n        });\n      });\n    };\n    connectToROS();\n    const checkStaleData = setInterval(() => {\n      const currentTime = Date.now();\n      setTemperatures(prevTemps => {\n        const newTemps = {\n          ...prevTemps\n        };\n        Object.keys(newTemps).forEach(topic => {\n          if (currentTime - newTemps[topic].lastUpdated > staleThreshold) {\n            console.log(`Data for ${topic} is stale. Setting value to 'None'.`); // Log stale data\n            newTemps[topic] = {\n              ...newTemps[topic],\n              value: 'None'\n            };\n          }\n        });\n        return newTemps;\n      });\n    }, 1000);\n    return () => {\n      clearInterval(checkStaleData);\n      if (rosRef.current) {\n        rosRef.current.close();\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"temperature-display\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"Temperature Sensors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Object.entries(temperatures).map(([topic, {\n        value\n      }]) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [topic, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), \" \", value === 'None' ? value : `${value.toFixed(2)} °C`]\n      }, topic, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureDisplay, \"qq4u9qThK+r3VWH/qXXRArZ7Y2I=\");\n_c = TemperatureDisplay;\nexport default TemperatureDisplay;\nvar _c;\n$RefreshReg$(_c, \"TemperatureDisplay\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ROSLIB","jsxDEV","_jsxDEV","TemperatureDisplay","_s","temperatures","setTemperatures","rosRef","staleThreshold","connectToROS","current","close","ros","Ros","url","on","console","log","subscribeToTopics","error","setTimeout","topics","forEach","topic","subscriber","Topic","name","messageType","subscribe","message","data","prevTemps","updatedTemps","value","lastUpdated","Date","now","checkStaleData","setInterval","currentTime","newTemps","Object","keys","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","entries","map","toFixed","_c","$RefreshReg$"],"sources":["E:/bored tunnelers project/tbm-dashboard/src/components/TemperatureDisplay.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport ROSLIB from 'roslib';\r\n\r\nconst TemperatureDisplay = () => {\r\n  const [temperatures, setTemperatures] = useState({});\r\n  const rosRef = useRef(null);\r\n  const staleThreshold = 5000; // 5 seconds threshold for considering data as stale\r\n\r\n  useEffect(() => {\r\n    const connectToROS = () => {\r\n      if (rosRef.current) {\r\n        rosRef.current.close();\r\n      }\r\n\r\n      const ros = new ROSLIB.Ros({\r\n        url: 'ws://192.168.0.193:9090'\r\n      });\r\n\r\n      ros.on('connection', () => {\r\n        console.log('Connected to websocket server.');\r\n        rosRef.current = ros;\r\n        subscribeToTopics();\r\n      });\r\n\r\n      ros.on('error', (error) => {\r\n        console.log('Error connecting to websocket server: ', error);\r\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\r\n      });\r\n\r\n      ros.on('close', () => {\r\n        console.log('Connection to websocket server closed.');\r\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\r\n      });\r\n    };\r\n\r\n    const subscribeToTopics = () => {\r\n      const topics = ['/temperature_1', '/temperature_2']; // Add more as needed\r\n      topics.forEach(topic => {\r\n        const subscriber = new ROSLIB.Topic({\r\n          ros: rosRef.current,\r\n          name: topic,\r\n          messageType: 'std_msgs/Float32'\r\n        });\r\n\r\n        subscriber.subscribe((message) => {\r\n          console.log(`Received data for ${topic}:`, message.data); // Log incoming data\r\n          console.log('Current temperatures state before update:', temperatures);\r\n          setTemperatures(prevTemps => {\r\n            const updatedTemps = {\r\n              ...prevTemps,\r\n              [topic]: {\r\n                value: message.data,\r\n                lastUpdated: Date.now()\r\n              }\r\n            };\r\n            console.log('Updated temperatures state:', updatedTemps); // Log updated state\r\n            return updatedTemps;\r\n          });\r\n        });\r\n      });\r\n    };\r\n\r\n    connectToROS();\r\n\r\n    const checkStaleData = setInterval(() => {\r\n      const currentTime = Date.now();\r\n      setTemperatures(prevTemps => {\r\n        const newTemps = { ...prevTemps };\r\n        Object.keys(newTemps).forEach(topic => {\r\n          if (currentTime - newTemps[topic].lastUpdated > staleThreshold) {\r\n            console.log(`Data for ${topic} is stale. Setting value to 'None'.`); // Log stale data\r\n            newTemps[topic] = { ...newTemps[topic], value: 'None' };\r\n          }\r\n        });\r\n        return newTemps;\r\n      });\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(checkStaleData);\r\n      if (rosRef.current) {\r\n        rosRef.current.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"temperature-display\">\r\n      <h2 className=\"text-center\">Temperature Sensors</h2>\r\n      <ul>\r\n        {Object.entries(temperatures).map(([topic, { value }]) => (\r\n          <li key={topic}>\r\n            <strong>{topic}:</strong> {value === 'None' ? value : `${value.toFixed(2)} °C`}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemperatureDisplay;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAMU,MAAM,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMS,cAAc,GAAG,IAAI,CAAC,CAAC;;EAE7BV,SAAS,CAAC,MAAM;IACd,MAAMW,YAAY,GAAGA,CAAA,KAAM;MACzB,IAAIF,MAAM,CAACG,OAAO,EAAE;QAClBH,MAAM,CAACG,OAAO,CAACC,KAAK,CAAC,CAAC;MACxB;MAEA,MAAMC,GAAG,GAAG,IAAIZ,MAAM,CAACa,GAAG,CAAC;QACzBC,GAAG,EAAE;MACP,CAAC,CAAC;MAEFF,GAAG,CAACG,EAAE,CAAC,YAAY,EAAE,MAAM;QACzBC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;QAC7CV,MAAM,CAACG,OAAO,GAAGE,GAAG;QACpBM,iBAAiB,CAAC,CAAC;MACrB,CAAC,CAAC;MAEFN,GAAG,CAACG,EAAE,CAAC,OAAO,EAAGI,KAAK,IAAK;QACzBH,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEE,KAAK,CAAC;QAC5DC,UAAU,CAACX,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;MAClC,CAAC,CAAC;MAEFG,GAAG,CAACG,EAAE,CAAC,OAAO,EAAE,MAAM;QACpBC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;QACrDG,UAAU,CAACX,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;MAClC,CAAC,CAAC;IACJ,CAAC;IAED,MAAMS,iBAAiB,GAAGA,CAAA,KAAM;MAC9B,MAAMG,MAAM,GAAG,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC,CAAC;MACrDA,MAAM,CAACC,OAAO,CAACC,KAAK,IAAI;QACtB,MAAMC,UAAU,GAAG,IAAIxB,MAAM,CAACyB,KAAK,CAAC;UAClCb,GAAG,EAAEL,MAAM,CAACG,OAAO;UACnBgB,IAAI,EAAEH,KAAK;UACXI,WAAW,EAAE;QACf,CAAC,CAAC;QAEFH,UAAU,CAACI,SAAS,CAAEC,OAAO,IAAK;UAChCb,OAAO,CAACC,GAAG,CAAC,qBAAqBM,KAAK,GAAG,EAAEM,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;UAC1Dd,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEZ,YAAY,CAAC;UACtEC,eAAe,CAACyB,SAAS,IAAI;YAC3B,MAAMC,YAAY,GAAG;cACnB,GAAGD,SAAS;cACZ,CAACR,KAAK,GAAG;gBACPU,KAAK,EAAEJ,OAAO,CAACC,IAAI;gBACnBI,WAAW,EAAEC,IAAI,CAACC,GAAG,CAAC;cACxB;YACF,CAAC;YACDpB,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEe,YAAY,CAAC,CAAC,CAAC;YAC1D,OAAOA,YAAY;UACrB,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IAEDvB,YAAY,CAAC,CAAC;IAEd,MAAM4B,cAAc,GAAGC,WAAW,CAAC,MAAM;MACvC,MAAMC,WAAW,GAAGJ,IAAI,CAACC,GAAG,CAAC,CAAC;MAC9B9B,eAAe,CAACyB,SAAS,IAAI;QAC3B,MAAMS,QAAQ,GAAG;UAAE,GAAGT;QAAU,CAAC;QACjCU,MAAM,CAACC,IAAI,CAACF,QAAQ,CAAC,CAAClB,OAAO,CAACC,KAAK,IAAI;UACrC,IAAIgB,WAAW,GAAGC,QAAQ,CAACjB,KAAK,CAAC,CAACW,WAAW,GAAG1B,cAAc,EAAE;YAC9DQ,OAAO,CAACC,GAAG,CAAC,YAAYM,KAAK,qCAAqC,CAAC,CAAC,CAAC;YACrEiB,QAAQ,CAACjB,KAAK,CAAC,GAAG;cAAE,GAAGiB,QAAQ,CAACjB,KAAK,CAAC;cAAEU,KAAK,EAAE;YAAO,CAAC;UACzD;QACF,CAAC,CAAC;QACF,OAAOO,QAAQ;MACjB,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAM;MACXG,aAAa,CAACN,cAAc,CAAC;MAC7B,IAAI9B,MAAM,CAACG,OAAO,EAAE;QAClBH,MAAM,CAACG,OAAO,CAACC,KAAK,CAAC,CAAC;MACxB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA;IAAK0C,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClC3C,OAAA;MAAI0C,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpD/C,OAAA;MAAA2C,QAAA,EACGJ,MAAM,CAACS,OAAO,CAAC7C,YAAY,CAAC,CAAC8C,GAAG,CAAC,CAAC,CAAC5B,KAAK,EAAE;QAAEU;MAAM,CAAC,CAAC,kBACnD/B,OAAA;QAAA2C,QAAA,gBACE3C,OAAA;UAAA2C,QAAA,GAAStB,KAAK,EAAC,GAAC;QAAA;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAAChB,KAAK,KAAK,MAAM,GAAGA,KAAK,GAAG,GAAGA,KAAK,CAACmB,OAAO,CAAC,CAAC,CAAC,KAAK;MAAA,GADvE7B,KAAK;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAC7C,EAAA,CA/FID,kBAAkB;AAAAkD,EAAA,GAAlBlD,kBAAkB;AAiGxB,eAAeA,kBAAkB;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}