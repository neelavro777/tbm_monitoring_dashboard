{"ast":null,"code":"var _jsxFileName = \"E:\\\\bored tunnelers project\\\\tbm-dashboard\\\\src\\\\components\\\\MotorControl.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport ROSLIB from 'roslib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MotorControl = () => {\n  _s();\n  const rosRef = useRef(null);\n  useEffect(() => {\n    const connectToROS = () => {\n      if (rosRef.current) {\n        rosRef.current.close();\n      }\n      const ros = new ROSLIB.Ros({\n        url: 'ws://192.168.0.193:9090'\n      });\n      ros.on('connection', () => {\n        console.log('Connected to websocket server for motor control.');\n        rosRef.current = ros;\n      });\n      ros.on('error', error => {\n        console.log('Error connecting to websocket server for motor control: ', error);\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\n      });\n      ros.on('close', () => {\n        console.log('Connection to websocket server for motor control closed.');\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\n      });\n    };\n    connectToROS();\n    return () => {\n      if (rosRef.current) {\n        rosRef.current.close();\n      }\n    };\n  }, []);\n  const sendMotorCommand = turnOn => {\n    const topic = new ROSLIB.Topic({\n      ros: rosRef.current,\n      name: '/web_motor_control',\n      messageType: 'std_msgs/Bool'\n    });\n    const message = new ROSLIB.Message({\n      data: turnOn\n    });\n    topic.publish(message);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-6 col-md-3 mt-4 mx-4\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendMotorCommand(true),\n        className: \"btn btn-primary me-2\",\n        children: \"Turn On Motor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendMotorCommand(false),\n        className: \"btn btn-secondary\",\n        children: \"Turn Off Motor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(MotorControl, \"eDz1RzT0ZIAC0y9NIMJJcv47ung=\");\n_c = MotorControl;\nexport default MotorControl;\nvar _c;\n$RefreshReg$(_c, \"MotorControl\");","map":{"version":3,"names":["React","useRef","useEffect","ROSLIB","jsxDEV","_jsxDEV","MotorControl","_s","rosRef","connectToROS","current","close","ros","Ros","url","on","console","log","error","setTimeout","sendMotorCommand","turnOn","topic","Topic","name","messageType","message","Message","data","publish","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/bored tunnelers project/tbm-dashboard/src/components/MotorControl.jsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport ROSLIB from 'roslib';\r\n\r\nconst MotorControl = () => {\r\n  const rosRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const connectToROS = () => {\r\n      if (rosRef.current) {\r\n        rosRef.current.close();\r\n      }\r\n\r\n      const ros = new ROSLIB.Ros({\r\n        url: 'ws://192.168.0.193:9090'\r\n      });\r\n\r\n      ros.on('connection', () => {\r\n        console.log('Connected to websocket server for motor control.');\r\n        rosRef.current = ros;\r\n      });\r\n\r\n      ros.on('error', (error) => {\r\n        console.log('Error connecting to websocket server for motor control: ', error);\r\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\r\n      });\r\n\r\n      ros.on('close', () => {\r\n        console.log('Connection to websocket server for motor control closed.');\r\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\r\n      });\r\n    };\r\n\r\n    connectToROS();\r\n\r\n    return () => {\r\n      if (rosRef.current) {\r\n        rosRef.current.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const sendMotorCommand = (turnOn) => {\r\n    const topic = new ROSLIB.Topic({\r\n      ros: rosRef.current,\r\n      name: '/web_motor_control',\r\n      messageType: 'std_msgs/Bool'\r\n    });\r\n\r\n    const message = new ROSLIB.Message({\r\n      data: turnOn\r\n    });\r\n\r\n    topic.publish(message);\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">   \r\n        <div className=\"col-6 col-md-3 mt-4 mx-4\"> {/* Adjust the column size as needed */}\r\n            <button onClick={() => sendMotorCommand(true)} className=\"btn btn-primary me-2\">Turn On Motor</button>\r\n            <button onClick={() => sendMotorCommand(false)} className=\"btn btn-secondary\">Turn Off Motor</button>\r\n        </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default MotorControl;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}