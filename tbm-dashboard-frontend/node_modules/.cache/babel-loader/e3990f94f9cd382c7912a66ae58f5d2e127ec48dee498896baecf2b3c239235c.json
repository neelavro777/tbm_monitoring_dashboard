{"ast":null,"code":"var _jsxFileName = \"E:\\\\bored tunnelers project\\\\tbm-dashboard\\\\src\\\\components\\\\PressureDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ROSLIB from 'roslib';\nimport { Alert } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PressureDisplay = () => {\n  _s();\n  const [pressures, setPressures] = useState({});\n  const rosRef = useRef(null);\n  const staleThreshold = 5000; // 5 seconds threshold for considering data as stale\n\n  useEffect(() => {\n    const connectToROS = () => {\n      if (rosRef.current) {\n        rosRef.current.close();\n      }\n      const ros = new ROSLIB.Ros({\n        url: 'ws://192.168.0.191:9090'\n      });\n      ros.on('connection', () => {\n        console.log('Connected to websocket server.');\n        rosRef.current = ros;\n        subscribeToTopics();\n      });\n      ros.on('error', error => {\n        console.log('Error connecting to websocket server: ', error);\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\n      });\n      ros.on('close', () => {\n        console.log('Connection to websocket server closed.');\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\n      });\n    };\n    const subscribeToTopics = () => {\n      const topics = ['/pressure_1', '/pressure_2', '/pressure_3', '/pressure_4', '/pressure_5']; // Add more as needed\n      topics.forEach(topic => {\n        const subscriber = new ROSLIB.Topic({\n          ros: rosRef.current,\n          name: topic,\n          messageType: 'std_msgs/Float32'\n        });\n        subscriber.subscribe(message => {\n          setPressures(prevPressures => ({\n            ...prevPressures,\n            [topic]: {\n              value: message.data,\n              lastUpdated: Date.now()\n            }\n          }));\n        });\n      });\n    };\n    connectToROS();\n    const checkStaleData = setInterval(() => {\n      const currentTime = Date.now();\n      setPressures(prevPressures => {\n        const newPressures = {\n          ...prevPressures\n        };\n        Object.keys(newPressures).forEach(topic => {\n          if (currentTime - newPressures[topic].lastUpdated > staleThreshold) {\n            newPressures[topic] = {\n              ...newPressures[topic],\n              value: 'None'\n            };\n          }\n        });\n        return newPressures;\n      });\n    }, 1000);\n    return () => {\n      clearInterval(checkStaleData);\n      if (rosRef.current) {\n        rosRef.current.close();\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-6 col-md-3 mt-4 mx-4\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center mb-4\",\n      children: \"Pressure Sensors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-unstyled\",\n      children: Object.entries(pressures).map(([topic, {\n        value\n      }]) => {\n        let alertVariant = \"light\";\n        if (value !== 'None') {\n          if (value > 80) {\n            alertVariant = \"danger\";\n          } else if (value < 20) {\n            alertVariant = \"info\";\n          }\n        }\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Alert, {\n            variant: alertVariant,\n            className: \"d-flex justify-content-between align-items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [topic, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this), \" \", value === 'None' ? value : `${value.toFixed(2)} PSI`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)\n        }, topic, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(PressureDisplay, \"GQ0qVdD7OgoXqNIHT42TIdfhgzw=\");\n_c = PressureDisplay;\nexport default PressureDisplay;\nvar _c;\n$RefreshReg$(_c, \"PressureDisplay\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ROSLIB","Alert","jsxDEV","_jsxDEV","PressureDisplay","_s","pressures","setPressures","rosRef","staleThreshold","connectToROS","current","close","ros","Ros","url","on","console","log","subscribeToTopics","error","setTimeout","topics","forEach","topic","subscriber","Topic","name","messageType","subscribe","message","prevPressures","value","data","lastUpdated","Date","now","checkStaleData","setInterval","currentTime","newPressures","Object","keys","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","entries","map","alertVariant","variant","toFixed","_c","$RefreshReg$"],"sources":["E:/bored tunnelers project/tbm-dashboard/src/components/PressureDisplay.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport ROSLIB from 'roslib';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nconst PressureDisplay = () => {\r\n  const [pressures, setPressures] = useState({});\r\n  const rosRef = useRef(null);\r\n  const staleThreshold = 5000; // 5 seconds threshold for considering data as stale\r\n\r\n  useEffect(() => {\r\n    const connectToROS = () => {\r\n      if (rosRef.current) {\r\n        rosRef.current.close();\r\n      }\r\n\r\n      const ros = new ROSLIB.Ros({\r\n        url: 'ws://192.168.0.191:9090'\r\n      });\r\n\r\n      ros.on('connection', () => {\r\n        console.log('Connected to websocket server.');\r\n        rosRef.current = ros;\r\n        subscribeToTopics();\r\n      });\r\n\r\n      ros.on('error', (error) => {\r\n        console.log('Error connecting to websocket server: ', error);\r\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\r\n      });\r\n\r\n      ros.on('close', () => {\r\n        console.log('Connection to websocket server closed.');\r\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\r\n      });\r\n    };\r\n\r\n    const subscribeToTopics = () => {\r\n      const topics = ['/pressure_1', '/pressure_2', '/pressure_3', '/pressure_4', '/pressure_5']; // Add more as needed\r\n      topics.forEach(topic => {\r\n        const subscriber = new ROSLIB.Topic({\r\n          ros: rosRef.current,\r\n          name: topic,\r\n          messageType: 'std_msgs/Float32'\r\n        });\r\n\r\n        subscriber.subscribe((message) => {\r\n          setPressures(prevPressures => ({\r\n            ...prevPressures,\r\n            [topic]: {\r\n              value: message.data,\r\n              lastUpdated: Date.now()\r\n            }\r\n          }));\r\n        });\r\n      });\r\n    };\r\n\r\n    connectToROS();\r\n\r\n    const checkStaleData = setInterval(() => {\r\n      const currentTime = Date.now();\r\n      setPressures(prevPressures => {\r\n        const newPressures = { ...prevPressures };\r\n        Object.keys(newPressures).forEach(topic => {\r\n          if (currentTime - newPressures[topic].lastUpdated > staleThreshold) {\r\n            newPressures[topic] = { ...newPressures[topic], value: 'None' };\r\n          }\r\n        });\r\n        return newPressures;\r\n      });\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(checkStaleData);\r\n      if (rosRef.current) {\r\n        rosRef.current.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"col-6 col-md-3 mt-4 mx-4\"> {/* Adjust the column size as needed */}\r\n      <h2 className=\"text-center mb-4\">Pressure Sensors</h2>\r\n      <ul className=\"list-unstyled\">\r\n        {Object.entries(pressures).map(([topic, { value }]) => {\r\n          let alertVariant = \"light\";\r\n          if (value !== 'None') {\r\n            if (value > 80) {\r\n              alertVariant = \"danger\"; \r\n            } else if (value < 20) {\r\n              alertVariant = \"info\"; \r\n            }\r\n          }\r\n\r\n          return (\r\n            <li key={topic}>\r\n              <Alert variant={alertVariant} className=\"d-flex justify-content-between align-items-center\">\r\n                <strong>{topic}:</strong> {value === 'None' ? value : `${value.toFixed(2)} PSI`}\r\n              </Alert>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PressureDisplay;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,QAAQ;AAC3B,SAASC,KAAK,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAMW,MAAM,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMU,cAAc,GAAG,IAAI,CAAC,CAAC;;EAE7BX,SAAS,CAAC,MAAM;IACd,MAAMY,YAAY,GAAGA,CAAA,KAAM;MACzB,IAAIF,MAAM,CAACG,OAAO,EAAE;QAClBH,MAAM,CAACG,OAAO,CAACC,KAAK,CAAC,CAAC;MACxB;MAEA,MAAMC,GAAG,GAAG,IAAIb,MAAM,CAACc,GAAG,CAAC;QACzBC,GAAG,EAAE;MACP,CAAC,CAAC;MAEFF,GAAG,CAACG,EAAE,CAAC,YAAY,EAAE,MAAM;QACzBC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;QAC7CV,MAAM,CAACG,OAAO,GAAGE,GAAG;QACpBM,iBAAiB,CAAC,CAAC;MACrB,CAAC,CAAC;MAEFN,GAAG,CAACG,EAAE,CAAC,OAAO,EAAGI,KAAK,IAAK;QACzBH,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEE,KAAK,CAAC;QAC5DC,UAAU,CAACX,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;MAClC,CAAC,CAAC;MAEFG,GAAG,CAACG,EAAE,CAAC,OAAO,EAAE,MAAM;QACpBC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;QACrDG,UAAU,CAACX,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;MAClC,CAAC,CAAC;IACJ,CAAC;IAED,MAAMS,iBAAiB,GAAGA,CAAA,KAAM;MAC9B,MAAMG,MAAM,GAAG,CAAC,aAAa,EAAE,aAAa,EAAE,aAAa,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC,CAAC;MAC5FA,MAAM,CAACC,OAAO,CAACC,KAAK,IAAI;QACtB,MAAMC,UAAU,GAAG,IAAIzB,MAAM,CAAC0B,KAAK,CAAC;UAClCb,GAAG,EAAEL,MAAM,CAACG,OAAO;UACnBgB,IAAI,EAAEH,KAAK;UACXI,WAAW,EAAE;QACf,CAAC,CAAC;QAEFH,UAAU,CAACI,SAAS,CAAEC,OAAO,IAAK;UAChCvB,YAAY,CAACwB,aAAa,KAAK;YAC7B,GAAGA,aAAa;YAChB,CAACP,KAAK,GAAG;cACPQ,KAAK,EAAEF,OAAO,CAACG,IAAI;cACnBC,WAAW,EAAEC,IAAI,CAACC,GAAG,CAAC;YACxB;UACF,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IAED1B,YAAY,CAAC,CAAC;IAEd,MAAM2B,cAAc,GAAGC,WAAW,CAAC,MAAM;MACvC,MAAMC,WAAW,GAAGJ,IAAI,CAACC,GAAG,CAAC,CAAC;MAC9B7B,YAAY,CAACwB,aAAa,IAAI;QAC5B,MAAMS,YAAY,GAAG;UAAE,GAAGT;QAAc,CAAC;QACzCU,MAAM,CAACC,IAAI,CAACF,YAAY,CAAC,CAACjB,OAAO,CAACC,KAAK,IAAI;UACzC,IAAIe,WAAW,GAAGC,YAAY,CAAChB,KAAK,CAAC,CAACU,WAAW,GAAGzB,cAAc,EAAE;YAClE+B,YAAY,CAAChB,KAAK,CAAC,GAAG;cAAE,GAAGgB,YAAY,CAAChB,KAAK,CAAC;cAAEQ,KAAK,EAAE;YAAO,CAAC;UACjE;QACF,CAAC,CAAC;QACF,OAAOQ,YAAY;MACrB,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAM;MACXG,aAAa,CAACN,cAAc,CAAC;MAC7B,IAAI7B,MAAM,CAACG,OAAO,EAAE;QAClBH,MAAM,CAACG,OAAO,CAACC,KAAK,CAAC,CAAC;MACxB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA;IAAKyC,SAAS,EAAC,0BAA0B;IAAAC,QAAA,GAAC,GAAC,eACzC1C,OAAA;MAAIyC,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtD9C,OAAA;MAAIyC,SAAS,EAAC,eAAe;MAAAC,QAAA,EAC1BJ,MAAM,CAACS,OAAO,CAAC5C,SAAS,CAAC,CAAC6C,GAAG,CAAC,CAAC,CAAC3B,KAAK,EAAE;QAAEQ;MAAM,CAAC,CAAC,KAAK;QACrD,IAAIoB,YAAY,GAAG,OAAO;QAC1B,IAAIpB,KAAK,KAAK,MAAM,EAAE;UACpB,IAAIA,KAAK,GAAG,EAAE,EAAE;YACdoB,YAAY,GAAG,QAAQ;UACzB,CAAC,MAAM,IAAIpB,KAAK,GAAG,EAAE,EAAE;YACrBoB,YAAY,GAAG,MAAM;UACvB;QACF;QAEA,oBACEjD,OAAA;UAAA0C,QAAA,eACE1C,OAAA,CAACF,KAAK;YAACoD,OAAO,EAAED,YAAa;YAACR,SAAS,EAAC,mDAAmD;YAAAC,QAAA,gBACzF1C,OAAA;cAAA0C,QAAA,GAASrB,KAAK,EAAC,GAAC;YAAA;cAAAsB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACjB,KAAK,KAAK,MAAM,GAAGA,KAAK,GAAG,GAAGA,KAAK,CAACsB,OAAO,CAAC,CAAC,CAAC,MAAM;UAAA;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1E;QAAC,GAHDzB,KAAK;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIV,CAAC;MAET,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAC5C,EAAA,CArGID,eAAe;AAAAmD,EAAA,GAAfnD,eAAe;AAuGrB,eAAeA,eAAe;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}