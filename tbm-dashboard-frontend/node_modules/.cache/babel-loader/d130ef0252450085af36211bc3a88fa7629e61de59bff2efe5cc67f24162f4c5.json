{"ast":null,"code":"var _jsxFileName = \"E:\\\\bored tunnelers project\\\\tbm-dashboard\\\\src\\\\components\\\\TemperatureDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ROSLIB from 'roslib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperatureDisplay = () => {\n  _s();\n  const [temperatures, setTemperatures] = useState({});\n  const [lastUpdated, setLastUpdated] = useState({});\n  const [connected, setConnected] = useState(false);\n  const rosRef = React.useRef(null); // Ref to store the ROS instance\n  const staleThreshold = 5000; // 5 seconds threshold for considering data as stale\n\n  useEffect(() => {\n    const connectToROS = () => {\n      const ros = new ROSLIB.Ros({\n        url: 'ws://192.168.0.193:9090'\n      });\n      ros.on('connection', () => {\n        console.log('Connected to websocket server.');\n        setConnected(true);\n        subscribeToTopics(ros);\n      });\n      ros.on('error', error => {\n        console.log('Error connecting to websocket server: ', error);\n        setConnected(false);\n        setTimeout(() => connectToROS(), 5000); // Attempt to reconnect every 5 seconds\n      });\n      ros.on('close', () => {\n        console.log('Connection to websocket server closed.');\n        setConnected(false);\n        setTimeout(() => connectToROS(), 5000); // Attempt to reconnect every 5 seconds\n      });\n      rosRef.current = ros; // Store the ROS instance in the ref\n    };\n    const subscribeToTopics = ros => {\n      // Define topic names for temperature sensors\n      const topics = ['/temperature_1', '/temperature_2']; // Add more as needed\n\n      // Create subscribers for each topic\n      const subscribers = topics.map(topic => {\n        const subscriber = new ROSLIB.Topic({\n          ros: ros,\n          name: topic,\n          messageType: 'std_msgs/Float32'\n        });\n        subscriber.subscribe(message => {\n          // Handle incoming message\n          setTemperatures(prevTemps => ({\n            ...prevTemps,\n            [topic]: message.data\n          }));\n          setLastUpdated(prevTimes => ({\n            ...prevTimes,\n            [topic]: Date.now()\n          }));\n        });\n        return subscriber;\n      });\n\n      // Store the subscribers in the ref to clean up later\n      rosRef.current.subscribers = subscribers;\n    };\n    connectToROS();\n    const intervalId = setInterval(() => {\n      setTemperatures(prevTemps => {\n        const newTemps = {\n          ...prevTemps\n        };\n        const currentTime = Date.now();\n        Object.keys(lastUpdated).forEach(topic => {\n          if (currentTime - lastUpdated[topic] > staleThreshold) {\n            newTemps[topic] = 'None';\n          }\n        });\n        return newTemps;\n      });\n    }, 1000);\n    return () => {\n      // Clean up subscriptions and close ROS connection\n      if (rosRef.current) {\n        if (rosRef.current.subscribers) {\n          rosRef.current.subscribers.forEach(subscriber => subscriber.unsubscribe());\n        }\n        rosRef.current.close();\n      }\n      clearInterval(intervalId);\n    };\n  }, [lastUpdated]); // Dependency array to re-run useEffect when lastUpdated changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"temperature-display\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"Temperature Sensors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Object.entries(temperatures).map(([topic, temp]) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [topic, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), \" \", temp === 'None' ? temp : `${temp.toFixed(2)} °C`]\n      }, topic, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureDisplay, \"PaF76qwvDw3wNCM0EKbp/TjIwVY=\");\n_c = TemperatureDisplay;\nexport default TemperatureDisplay;\nvar _c;\n$RefreshReg$(_c, \"TemperatureDisplay\");","map":{"version":3,"names":["React","useState","useEffect","ROSLIB","jsxDEV","_jsxDEV","TemperatureDisplay","_s","temperatures","setTemperatures","lastUpdated","setLastUpdated","connected","setConnected","rosRef","useRef","staleThreshold","connectToROS","ros","Ros","url","on","console","log","subscribeToTopics","error","setTimeout","current","topics","subscribers","map","topic","subscriber","Topic","name","messageType","subscribe","message","prevTemps","data","prevTimes","Date","now","intervalId","setInterval","newTemps","currentTime","Object","keys","forEach","unsubscribe","close","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","entries","temp","toFixed","_c","$RefreshReg$"],"sources":["E:/bored tunnelers project/tbm-dashboard/src/components/TemperatureDisplay.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ROSLIB from 'roslib';\r\n\r\nconst TemperatureDisplay = () => {\r\n  const [temperatures, setTemperatures] = useState({});\r\n  const [lastUpdated, setLastUpdated] = useState({});\r\n  const [connected, setConnected] = useState(false);\r\n  const rosRef = React.useRef(null); // Ref to store the ROS instance\r\n  const staleThreshold = 5000; // 5 seconds threshold for considering data as stale\r\n\r\n  useEffect(() => {\r\n    const connectToROS = () => {\r\n      const ros = new ROSLIB.Ros({\r\n        url: 'ws://192.168.0.193:9090'\r\n      });\r\n\r\n      ros.on('connection', () => {\r\n        console.log('Connected to websocket server.');\r\n        setConnected(true);\r\n        subscribeToTopics(ros);\r\n      });\r\n\r\n      ros.on('error', (error) => {\r\n        console.log('Error connecting to websocket server: ', error);\r\n        setConnected(false);\r\n        setTimeout(() => connectToROS(), 5000); // Attempt to reconnect every 5 seconds\r\n      });\r\n\r\n      ros.on('close', () => {\r\n        console.log('Connection to websocket server closed.');\r\n        setConnected(false);\r\n        setTimeout(() => connectToROS(), 5000); // Attempt to reconnect every 5 seconds\r\n      });\r\n\r\n      rosRef.current = ros; // Store the ROS instance in the ref\r\n    };\r\n\r\n    const subscribeToTopics = (ros) => {\r\n      // Define topic names for temperature sensors\r\n      const topics = ['/temperature_1', '/temperature_2'];  // Add more as needed\r\n\r\n      // Create subscribers for each topic\r\n      const subscribers = topics.map(topic => {\r\n        const subscriber = new ROSLIB.Topic({\r\n          ros: ros,\r\n          name: topic,\r\n          messageType: 'std_msgs/Float32'\r\n        });\r\n\r\n        subscriber.subscribe((message) => {\r\n          // Handle incoming message\r\n          setTemperatures(prevTemps => ({\r\n            ...prevTemps,\r\n            [topic]: message.data\r\n          }));\r\n          setLastUpdated(prevTimes => ({\r\n            ...prevTimes,\r\n            [topic]: Date.now()\r\n          }));\r\n        });\r\n\r\n        return subscriber;\r\n      });\r\n\r\n      // Store the subscribers in the ref to clean up later\r\n      rosRef.current.subscribers = subscribers;\r\n    };\r\n\r\n    connectToROS();\r\n\r\n    const intervalId = setInterval(() => {\r\n      setTemperatures(prevTemps => {\r\n        const newTemps = { ...prevTemps };\r\n        const currentTime = Date.now();\r\n        Object.keys(lastUpdated).forEach(topic => {\r\n          if (currentTime - lastUpdated[topic] > staleThreshold) {\r\n            newTemps[topic] = 'None';\r\n          }\r\n        });\r\n        return newTemps;\r\n      });\r\n    }, 1000);\r\n\r\n    return () => {\r\n      // Clean up subscriptions and close ROS connection\r\n      if (rosRef.current) {\r\n        if (rosRef.current.subscribers) {\r\n          rosRef.current.subscribers.forEach(subscriber => subscriber.unsubscribe());\r\n        }\r\n        rosRef.current.close();\r\n      }\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [lastUpdated]);  // Dependency array to re-run useEffect when lastUpdated changes\r\n\r\n  return (\r\n    <div className=\"temperature-display\">\r\n      <h2 className=\"text-center\">Temperature Sensors</h2>\r\n      <ul>\r\n        {Object.entries(temperatures).map(([topic, temp]) => (\r\n          <li key={topic}>\r\n            <strong>{topic}:</strong> {temp === 'None' ? temp : `${temp.toFixed(2)} °C`}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemperatureDisplay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}