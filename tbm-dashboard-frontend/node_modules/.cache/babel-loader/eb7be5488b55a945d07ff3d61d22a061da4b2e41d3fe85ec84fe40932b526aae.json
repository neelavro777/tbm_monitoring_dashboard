{"ast":null,"code":"var _jsxFileName = \"E:\\\\bored tunnelers project\\\\tbm-dashboard\\\\src\\\\components\\\\TemperatureDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ROSLIB from 'roslib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperatureDisplay = () => {\n  _s();\n  const [temperatures, setTemperatures] = useState({});\n  const [connected, setConnected] = useState(false);\n  useEffect(() => {\n    const connectToROS = () => {\n      const ros = new ROSLIB.Ros({\n        url: 'ws://192.168.0.193:9090'\n      });\n      ros.on('connection', () => {\n        console.log('Connected to websocket server.');\n        setConnected(true);\n      });\n      ros.on('error', error => {\n        console.log('Error connecting to websocket server: ', error);\n        setConnected(false);\n        setTimeout(() => connectToROS(), 5000); // Attempt to reconnect every 5 seconds\n      });\n      ros.on('close', () => {\n        console.log('Connection to websocket server closed.');\n        setConnected(false);\n        setTimeout(() => connectToROS(), 5000); // Attempt to reconnect every 5 seconds\n      });\n      return ros;\n    };\n    const ros = connectToROS();\n    // Define topic names for temperature sensors\n    const topics = ['/temperature_1', '/temperature_2']; // Add more as needed\n\n    // Create subscribers for each topic\n    const subscribers = topics.map(topic => {\n      const subscriber = new ROSLIB.Topic({\n        ros: ros,\n        name: topic,\n        messageType: 'std_msgs/Float32'\n      });\n      subscriber.subscribe(message => {\n        // Handle incoming message\n        setTemperatures(prevTemps => ({\n          ...prevTemps,\n          [topic]: message.data\n        }));\n      });\n      return subscriber;\n    });\n    return () => {\n      // Clean up subscriptions and close ROS connection\n      subscribers.forEach(subscriber => subscriber.unsubscribe());\n      ros.close();\n    };\n  }, []); // Empty dependency array ensures useEffect runs only once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"temperature-display\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"Temperature Sensors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [console.log(temperatures), Object.entries(temperatures).map(([topic, temp]) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [topic, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), \" \", temp.toFixed(2), \" \\xB0C\"]\n      }, topic, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureDisplay, \"K8soUaZLem1MCi2xzH13Mph8aL0=\");\n_c = TemperatureDisplay;\nexport default TemperatureDisplay;\nvar _c;\n$RefreshReg$(_c, \"TemperatureDisplay\");","map":{"version":3,"names":["React","useState","useEffect","ROSLIB","jsxDEV","_jsxDEV","TemperatureDisplay","_s","temperatures","setTemperatures","connected","setConnected","connectToROS","ros","Ros","url","on","console","log","error","setTimeout","topics","subscribers","map","topic","subscriber","Topic","name","messageType","subscribe","message","prevTemps","data","forEach","unsubscribe","close","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","temp","toFixed","_c","$RefreshReg$"],"sources":["E:/bored tunnelers project/tbm-dashboard/src/components/TemperatureDisplay.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ROSLIB from 'roslib';\r\n\r\nconst TemperatureDisplay = () => {\r\n  const [temperatures, setTemperatures] = useState({});\r\n  const [connected, setConnected] = useState(false);\r\n  useEffect(() => {\r\n\r\n    const connectToROS = () => {\r\n      const ros = new ROSLIB.Ros({\r\n        url: 'ws://192.168.0.193:9090'\r\n      });\r\n\r\n      ros.on('connection', () => {\r\n        console.log('Connected to websocket server.');\r\n        setConnected(true);\r\n      });\r\n\r\n      ros.on('error', (error) => {\r\n        console.log('Error connecting to websocket server: ', error);\r\n        setConnected(false);\r\n        setTimeout(() => connectToROS(), 5000); // Attempt to reconnect every 5 seconds\r\n      });\r\n\r\n      ros.on('close', () => {\r\n        console.log('Connection to websocket server closed.');\r\n        setConnected(false);\r\n        setTimeout(() => connectToROS(), 5000); // Attempt to reconnect every 5 seconds\r\n      });\r\n\r\n      return ros;\r\n    };\r\n\r\n    const ros = connectToROS();\r\n    // Define topic names for temperature sensors\r\n    const topics = ['/temperature_1', '/temperature_2'];  // Add more as needed\r\n\r\n    // Create subscribers for each topic\r\n    const subscribers = topics.map(topic => {\r\n      const subscriber = new ROSLIB.Topic({\r\n        ros: ros,\r\n        name: topic,\r\n        messageType: 'std_msgs/Float32'\r\n      });\r\n\r\n      subscriber.subscribe((message) => {\r\n        // Handle incoming message\r\n        setTemperatures(prevTemps => ({\r\n          ...prevTemps,\r\n          [topic]: message.data\r\n        }));\r\n      });\r\n\r\n      return subscriber;\r\n    });\r\n\r\n    return () => {\r\n      // Clean up subscriptions and close ROS connection\r\n      subscribers.forEach(subscriber => subscriber.unsubscribe());\r\n      ros.close();\r\n    };\r\n  }, []);  // Empty dependency array ensures useEffect runs only once\r\n\r\n  return (\r\n    <div className=\"temperature-display\">\r\n      <h2 className=\"text-center\">Temperature Sensors</h2>\r\n      <ul>\r\n        {console.log(temperatures)}\r\n        {Object.entries(temperatures).map(([topic, temp]) => (\r\n          <li key={topic}>\r\n            <strong>{topic}:</strong> {temp.toFixed(2)} Â°C\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemperatureDisplay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}