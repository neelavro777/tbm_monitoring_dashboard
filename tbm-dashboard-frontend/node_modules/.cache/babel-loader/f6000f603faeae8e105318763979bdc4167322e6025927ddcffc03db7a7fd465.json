{"ast":null,"code":"var _jsxFileName = \"E:\\\\bored tunnelers project\\\\tbm-dashboard\\\\src\\\\components\\\\TemperatureDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ROSLIB from 'roslib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperatureDisplay = () => {\n  _s();\n  const [temperatures, setTemperatures] = useState([]);\n  useEffect(() => {\n    const ros = new ROSLIB.Ros({\n      url: 'ws://192.168.0.193:9090' // Adjust this URL to your ROSBridge server\n    });\n\n    // Define topic names for temperature sensors\n    const topics = ['/temperature_1', '/temperature_2']; // Add more as needed\n\n    // Create subscribers for each topic\n    const subscribers = topics.map(topic => {\n      const subscriber = new ROSLIB.Topic({\n        ros: ros,\n        name: topic,\n        messageType: 'std_msgs/Float32'\n      });\n      subscriber.subscribe(message => {\n        // Handle incoming message\n        const updatedTemperatures = [...temperatures];\n        updatedTemperatures.push({\n          topic: topic,\n          value: message.data\n        });\n        setTemperatures(updatedTemperatures);\n      });\n      return subscriber;\n    });\n    ros.on('error', error => {\n      console.error('Error connecting to ROS:', error);\n      // Handle error state if needed\n    });\n    ros.on('close', () => {\n      console.log('Connection to ROS closed.');\n      // Handle close state if needed\n    });\n    return () => {\n      // Clean up subscriptions and close ROS connection\n      subscribers.forEach(subscriber => subscriber.unsubscribe());\n      ros.close();\n    };\n  }, []); // Empty dependency array ensures useEffect runs only once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"temperature-display\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"Temperature Sensors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: temperatures.map((temp, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [temp.topic, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), \" \", temp.value.toFixed(2), \" \\xB0C\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureDisplay, \"bFUqW0EkzQyiLDuCYWpIj14n8No=\");\n_c = TemperatureDisplay;\nexport default TemperatureDisplay;\nvar _c;\n$RefreshReg$(_c, \"TemperatureDisplay\");","map":{"version":3,"names":["React","useState","useEffect","ROSLIB","jsxDEV","_jsxDEV","TemperatureDisplay","_s","temperatures","setTemperatures","ros","Ros","url","topics","subscribers","map","topic","subscriber","Topic","name","messageType","subscribe","message","updatedTemperatures","push","value","data","on","error","console","log","forEach","unsubscribe","close","className","children","fileName","_jsxFileName","lineNumber","columnNumber","temp","index","toFixed","_c","$RefreshReg$"],"sources":["E:/bored tunnelers project/tbm-dashboard/src/components/TemperatureDisplay.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ROSLIB from 'roslib';\r\n\r\nconst TemperatureDisplay = () => {\r\n  const [temperatures, setTemperatures] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const ros = new ROSLIB.Ros({\r\n      url: 'ws://192.168.0.193:9090'  // Adjust this URL to your ROSBridge server\r\n    });\r\n\r\n    // Define topic names for temperature sensors\r\n    const topics = ['/temperature_1', '/temperature_2'];  // Add more as needed\r\n\r\n    // Create subscribers for each topic\r\n    const subscribers = topics.map(topic => {\r\n      const subscriber = new ROSLIB.Topic({\r\n        ros: ros,\r\n        name: topic,\r\n        messageType: 'std_msgs/Float32'\r\n      });\r\n\r\n      subscriber.subscribe((message) => {\r\n        // Handle incoming message\r\n        const updatedTemperatures = [...temperatures];\r\n        updatedTemperatures.push({ topic: topic, value: message.data });\r\n        setTemperatures(updatedTemperatures);\r\n      });\r\n\r\n      return subscriber;\r\n    });\r\n\r\n    ros.on('error', (error) => {\r\n      console.error('Error connecting to ROS:', error);\r\n      // Handle error state if needed\r\n    });\r\n\r\n    ros.on('close', () => {\r\n      console.log('Connection to ROS closed.');\r\n      // Handle close state if needed\r\n    });\r\n\r\n    return () => {\r\n      // Clean up subscriptions and close ROS connection\r\n      subscribers.forEach(subscriber => subscriber.unsubscribe());\r\n      ros.close();\r\n    };\r\n  }, []);  // Empty dependency array ensures useEffect runs only once\r\n\r\n  return (\r\n    <div className=\"temperature-display\">\r\n      <h2 className=\"text-center\">Temperature Sensors</h2>\r\n      <ul>\r\n        {temperatures.map((temp, index) => (\r\n          <li key={index}>\r\n            <strong>{temp.topic}:</strong> {temp.value.toFixed(2)} Â°C\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemperatureDisplay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}