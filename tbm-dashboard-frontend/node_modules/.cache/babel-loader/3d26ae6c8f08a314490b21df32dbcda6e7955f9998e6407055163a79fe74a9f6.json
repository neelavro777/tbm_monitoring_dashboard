{"ast":null,"code":"var _jsxFileName = \"E:\\\\bored tunnelers project\\\\tbm-dashboard\\\\src\\\\components\\\\MotorControl.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport ROSLIB from 'roslib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MotorControl = () => {\n  _s();\n  const rosRef = useRef(null);\n  const [isConnected, setIsConnected] = useState(false); // Track connection state\n  const [alertMessage, setAlertMessage] = useState(''); // Alert message for the user\n\n  useEffect(() => {\n    const connectToROS = () => {\n      if (rosRef.current) {\n        rosRef.current.close();\n      }\n      const ros = new ROSLIB.Ros({\n        url: 'ws://192.168.0.193:9090'\n      });\n      ros.on('connection', () => {\n        console.log('Connected to websocket server for motor control.');\n        rosRef.current = ros;\n        setIsConnected(true);\n        setAlertMessage(''); // Clear any existing alert message\n      });\n      ros.on('error', error => {\n        console.log('Error connecting to websocket server for motor control: ', error);\n        setIsConnected(false);\n        setAlertMessage('Disconnected from ROS. Attempting to reconnect...');\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\n      });\n      ros.on('close', () => {\n        console.log('Connection to websocket server for motor control closed.');\n        setIsConnected(false);\n        setAlertMessage('Disconnected from ROS. Attempting to reconnect...');\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\n      });\n    };\n    connectToROS();\n    return () => {\n      if (rosRef.current) {\n        rosRef.current.close();\n      }\n    };\n  }, []);\n  const sendMotorCommand = turnOn => {\n    if (!isConnected) {\n      setAlertMessage('Cannot send command. Disconnected from ROS.');\n      return;\n    }\n    const topic = new ROSLIB.Topic({\n      ros: rosRef.current,\n      name: '/web_motor_control',\n      messageType: 'std_msgs/Bool'\n    });\n    const message = new ROSLIB.Message({\n      data: turnOn\n    });\n    topic.publish(message);\n    setAlertMessage(`Motor command to turn ${turnOn ? 'ON' : 'OFF'} sent.`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [alertMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-warning\",\n      children: alertMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-6 col-md-3 mt-4 mx-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendMotorCommand(true),\n        className: \"btn btn-primary me-2\",\n        children: \"Turn On Motor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendMotorCommand(false),\n        className: \"btn btn-secondary\",\n        children: \"Turn Off Motor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(MotorControl, \"5DXzDETRhk3XurZ6Dc83JJ8Rvz8=\");\n_c = MotorControl;\nexport default MotorControl;\nvar _c;\n$RefreshReg$(_c, \"MotorControl\");","map":{"version":3,"names":["React","useRef","useEffect","useState","ROSLIB","jsxDEV","_jsxDEV","MotorControl","_s","rosRef","isConnected","setIsConnected","alertMessage","setAlertMessage","connectToROS","current","close","ros","Ros","url","on","console","log","error","setTimeout","sendMotorCommand","turnOn","topic","Topic","name","messageType","message","Message","data","publish","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["E:/bored tunnelers project/tbm-dashboard/src/components/MotorControl.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport ROSLIB from 'roslib';\r\n\r\nconst MotorControl = () => {\r\n  const rosRef = useRef(null);\r\n  const [isConnected, setIsConnected] = useState(false); // Track connection state\r\n  const [alertMessage, setAlertMessage] = useState(''); // Alert message for the user\r\n\r\n  useEffect(() => {\r\n    const connectToROS = () => {\r\n      if (rosRef.current) {\r\n        rosRef.current.close();\r\n      }\r\n\r\n      const ros = new ROSLIB.Ros({\r\n        url: 'ws://192.168.0.193:9090'\r\n      });\r\n\r\n      ros.on('connection', () => {\r\n        console.log('Connected to websocket server for motor control.');\r\n        rosRef.current = ros;\r\n        setIsConnected(true);\r\n        setAlertMessage(''); // Clear any existing alert message\r\n      });\r\n\r\n      ros.on('error', (error) => {\r\n        console.log('Error connecting to websocket server for motor control: ', error);\r\n        setIsConnected(false);\r\n        setAlertMessage('Disconnected from ROS. Attempting to reconnect...');\r\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\r\n      });\r\n\r\n      ros.on('close', () => {\r\n        console.log('Connection to websocket server for motor control closed.');\r\n        setIsConnected(false);\r\n        setAlertMessage('Disconnected from ROS. Attempting to reconnect...');\r\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\r\n      });\r\n    };\r\n\r\n    connectToROS();\r\n\r\n    return () => {\r\n      if (rosRef.current) {\r\n        rosRef.current.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const sendMotorCommand = (turnOn) => {\r\n    if (!isConnected) {\r\n      setAlertMessage('Cannot send command. Disconnected from ROS.');\r\n      return;\r\n    }\r\n\r\n    const topic = new ROSLIB.Topic({\r\n      ros: rosRef.current,\r\n      name: '/web_motor_control',\r\n      messageType: 'std_msgs/Bool'\r\n    });\r\n\r\n    const message = new ROSLIB.Message({\r\n      data: turnOn\r\n    });\r\n\r\n    topic.publish(message);\r\n    setAlertMessage(`Motor command to turn ${turnOn ? 'ON' : 'OFF'} sent.`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {alertMessage && <div className=\"alert alert-warning\">{alertMessage}</div>}\r\n      <div className=\"col-6 col-md-3 mt-4 mx-4\">\r\n        <button onClick={() => sendMotorCommand(true)} className=\"btn btn-primary me-2\">Turn On Motor</button>\r\n        <button onClick={() => sendMotorCommand(false)} className=\"btn btn-secondary\">Turn Off Motor</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MotorControl;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}