{"ast":null,"code":"var _jsxFileName = \"E:\\\\bored tunnelers project\\\\tbm-dashboard\\\\src\\\\components\\\\CameraFeed.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport ROSLIB from 'roslib';\nimport MJPEGCANVAS from 'mjpegcanvas/lib/mjpegcanvas';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraFeed = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const ros = new ROSLIB.Ros({\n      url: 'ws://192.168.0.191:9090'\n    });\n    const connectToROS = () => {\n      ros.on('connection', () => {\n        console.log('Connected to websocket server.');\n        subscribeToCamera();\n      });\n      ros.on('error', error => {\n        console.log('Error connecting to websocket server: ', error);\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\n      });\n      ros.on('close', () => {\n        console.log('Connection to websocket server closed.');\n        setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\n      });\n    };\n    const subscribeToCamera = () => {\n      new MJPEGCANVAS.Viewer({\n        divID: 'mjpeg_canvas',\n        host: '192.168.0.193',\n        port: 8080,\n        width: 640,\n        height: 480,\n        topic: '/usb_cam/image_raw'\n      });\n    };\n    connectToROS();\n    return () => {\n      ros.close();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Camera Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"mjpeg_canvas\",\n      ref: canvasRef,\n      style: {\n        width: '640px',\n        height: '480px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(CameraFeed, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = CameraFeed;\nexport default CameraFeed;\nvar _c;\n$RefreshReg$(_c, \"CameraFeed\");","map":{"version":3,"names":["React","useEffect","useRef","ROSLIB","MJPEGCANVAS","jsxDEV","_jsxDEV","CameraFeed","_s","canvasRef","ros","Ros","url","connectToROS","on","console","log","subscribeToCamera","error","setTimeout","Viewer","divID","host","port","width","height","topic","close","children","fileName","_jsxFileName","lineNumber","columnNumber","id","ref","style","_c","$RefreshReg$"],"sources":["E:/bored tunnelers project/tbm-dashboard/src/components/CameraFeed.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport ROSLIB from 'roslib';\r\nimport MJPEGCANVAS from 'mjpegcanvas/lib/mjpegcanvas';\r\n\r\nconst CameraFeed = () => {\r\n    const canvasRef = useRef(null);\r\n    \r\n    useEffect(() => {\r\n        const ros = new ROSLIB.Ros({\r\n            url: 'ws://192.168.0.191:9090'\r\n        });\r\n\r\n        const connectToROS = () => {\r\n            ros.on('connection', () => {\r\n                console.log('Connected to websocket server.');\r\n                subscribeToCamera();\r\n            });\r\n\r\n            ros.on('error', (error) => {\r\n                console.log('Error connecting to websocket server: ', error);\r\n                setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\r\n            });\r\n\r\n            ros.on('close', () => {\r\n                console.log('Connection to websocket server closed.');\r\n                setTimeout(connectToROS, 5000); // Attempt to reconnect every 5 seconds\r\n            });\r\n        };\r\n\r\n        const subscribeToCamera = () => {\r\n            new MJPEGCANVAS.Viewer({\r\n                divID: 'mjpeg_canvas',\r\n                host: '192.168.0.193',\r\n                port: 8080,\r\n                width: 640,\r\n                height: 480,\r\n                topic: '/usb_cam/image_raw'\r\n            });\r\n        };\r\n\r\n        connectToROS();\r\n\r\n        return () => {\r\n            ros.close(); \r\n        };\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div>\r\n          <h2>Camera Feed</h2>\r\n          <div id=\"mjpeg_canvas\" ref={canvasRef} style={{ width: '640px', height: '480px' }}></div>\r\n        </div>\r\n      );\r\n};\r\n\r\nexport default CameraFeed;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,WAAW,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,SAAS,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZ,MAAMS,GAAG,GAAG,IAAIP,MAAM,CAACQ,GAAG,CAAC;MACvBC,GAAG,EAAE;IACT,CAAC,CAAC;IAEF,MAAMC,YAAY,GAAGA,CAAA,KAAM;MACvBH,GAAG,CAACI,EAAE,CAAC,YAAY,EAAE,MAAM;QACvBC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;QAC7CC,iBAAiB,CAAC,CAAC;MACvB,CAAC,CAAC;MAEFP,GAAG,CAACI,EAAE,CAAC,OAAO,EAAGI,KAAK,IAAK;QACvBH,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEE,KAAK,CAAC;QAC5DC,UAAU,CAACN,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;MACpC,CAAC,CAAC;MAEFH,GAAG,CAACI,EAAE,CAAC,OAAO,EAAE,MAAM;QAClBC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;QACrDG,UAAU,CAACN,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;MACpC,CAAC,CAAC;IACN,CAAC;IAED,MAAMI,iBAAiB,GAAGA,CAAA,KAAM;MAC5B,IAAIb,WAAW,CAACgB,MAAM,CAAC;QACnBC,KAAK,EAAE,cAAc;QACrBC,IAAI,EAAE,eAAe;QACrBC,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,GAAG;QACVC,MAAM,EAAE,GAAG;QACXC,KAAK,EAAE;MACX,CAAC,CAAC;IACN,CAAC;IAEDb,YAAY,CAAC,CAAC;IAEd,OAAO,MAAM;MACTH,GAAG,CAACiB,KAAK,CAAC,CAAC;IACf,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAGN,oBACIrB,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpB1B,OAAA;MAAK2B,EAAE,EAAC,cAAc;MAACC,GAAG,EAAEzB,SAAU;MAAC0B,KAAK,EAAE;QAAEX,KAAK,EAAE,OAAO;QAAEC,MAAM,EAAE;MAAQ;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtF,CAAC;AAEd,CAAC;AAACxB,EAAA,CAlDID,UAAU;AAAA6B,EAAA,GAAV7B,UAAU;AAoDhB,eAAeA,UAAU;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}