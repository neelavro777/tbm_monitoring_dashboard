{"ast":null,"code":"var _jsxFileName = \"E:\\\\bored tunnelers project\\\\tbm-dashboard\\\\src\\\\components\\\\TemperatureDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ROSLIB from 'roslib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperatureDisplay = () => {\n  _s();\n  const [temperatures, setTemperatures] = useState({});\n  const [lastUpdated, setLastUpdated] = useState({});\n  const [connected, setConnected] = useState(false);\n  const rosRef = useRef(null);\n  const staleThreshold = 5000; // 5 seconds threshold for considering data as stale\n\n  useEffect(() => {\n    const connectToROS = () => {\n      if (rosRef.current) {\n        rosRef.current.close();\n      }\n      console.log('Attempting to connect to ROS...');\n      const ros = new ROSLIB.Ros({\n        url: 'ws://192.168.0.193:9090'\n      });\n      ros.on('connection', () => {\n        console.log('Connected to websocket server.');\n        setConnected(true);\n        subscribeToTopics(ros);\n      });\n      ros.on('error', error => {\n        console.log('Error connecting to websocket server: ', error);\n        setConnected(false);\n        setTimeout(() => connectToROS(), 5000); // Attempt to reconnect every 5 seconds\n      });\n      ros.on('close', () => {\n        console.log('Connection to websocket server closed.');\n        setConnected(false);\n        setTimeout(() => connectToROS(), 5000); // Attempt to reconnect every 5 seconds\n      });\n      rosRef.current = ros;\n    };\n    const subscribeToTopics = ros => {\n      const topics = ['/temperature_1', '/temperature_2']; // Add more as needed\n\n      const subscribers = topics.map(topic => {\n        const subscriber = new ROSLIB.Topic({\n          ros: ros,\n          name: topic,\n          messageType: 'std_msgs/Float32'\n        });\n        subscriber.subscribe(message => {\n          console.log(`Received message from ${topic}: ${message.data}`);\n          setTemperatures(prevTemps => ({\n            ...prevTemps,\n            [topic]: message.data\n          }));\n          setLastUpdated(prevTimes => ({\n            ...prevTimes,\n            [topic]: Date.now()\n          }));\n        });\n        return subscriber;\n      });\n      rosRef.current.subscribers = subscribers;\n    };\n    connectToROS();\n    const intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      setTemperatures(prevTemps => {\n        const newTemps = {\n          ...prevTemps\n        };\n        Object.keys(lastUpdated).forEach(topic => {\n          if (currentTime - lastUpdated[topic] > staleThreshold) {\n            newTemps[topic] = 'None';\n          }\n        });\n        return newTemps;\n      });\n    }, 1000);\n    return () => {\n      if (rosRef.current) {\n        if (rosRef.current.subscribers) {\n          rosRef.current.subscribers.forEach(subscriber => subscriber.unsubscribe());\n        }\n        rosRef.current.close();\n      }\n      clearInterval(intervalId);\n    };\n  }, []); // Empty dependency array to run only once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"temperature-display\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"Temperature Sensors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Object.entries(temperatures).map(([topic, temp]) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [topic, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), \" \", temp === 'None' ? temp : `${temp.toFixed(2)} °C`]\n      }, topic, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"connection-status\",\n      children: connected ? 'Connected' : 'Disconnected'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureDisplay, \"PaF76qwvDw3wNCM0EKbp/TjIwVY=\");\n_c = TemperatureDisplay;\nexport default TemperatureDisplay;\nvar _c;\n$RefreshReg$(_c, \"TemperatureDisplay\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ROSLIB","jsxDEV","_jsxDEV","TemperatureDisplay","_s","temperatures","setTemperatures","lastUpdated","setLastUpdated","connected","setConnected","rosRef","staleThreshold","connectToROS","current","close","console","log","ros","Ros","url","on","subscribeToTopics","error","setTimeout","topics","subscribers","map","topic","subscriber","Topic","name","messageType","subscribe","message","data","prevTemps","prevTimes","Date","now","intervalId","setInterval","currentTime","newTemps","Object","keys","forEach","unsubscribe","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","entries","temp","toFixed","_c","$RefreshReg$"],"sources":["E:/bored tunnelers project/tbm-dashboard/src/components/TemperatureDisplay.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport ROSLIB from 'roslib';\r\n\r\nconst TemperatureDisplay = () => {\r\n  const [temperatures, setTemperatures] = useState({});\r\n  const [lastUpdated, setLastUpdated] = useState({});\r\n  const [connected, setConnected] = useState(false);\r\n  const rosRef = useRef(null);\r\n  const staleThreshold = 5000; // 5 seconds threshold for considering data as stale\r\n\r\n  useEffect(() => {\r\n    const connectToROS = () => {\r\n      if (rosRef.current) {\r\n        rosRef.current.close();\r\n      }\r\n\r\n      console.log('Attempting to connect to ROS...');\r\n\r\n      const ros = new ROSLIB.Ros({\r\n        url: 'ws://192.168.0.193:9090'\r\n      });\r\n\r\n      ros.on('connection', () => {\r\n        console.log('Connected to websocket server.');\r\n        setConnected(true);\r\n        subscribeToTopics(ros);\r\n      });\r\n\r\n      ros.on('error', (error) => {\r\n        console.log('Error connecting to websocket server: ', error);\r\n        setConnected(false);\r\n        setTimeout(() => connectToROS(), 5000); // Attempt to reconnect every 5 seconds\r\n      });\r\n\r\n      ros.on('close', () => {\r\n        console.log('Connection to websocket server closed.');\r\n        setConnected(false);\r\n        setTimeout(() => connectToROS(), 5000); // Attempt to reconnect every 5 seconds\r\n      });\r\n\r\n      rosRef.current = ros;\r\n    };\r\n\r\n    const subscribeToTopics = (ros) => {\r\n      const topics = ['/temperature_1', '/temperature_2'];  // Add more as needed\r\n\r\n      const subscribers = topics.map(topic => {\r\n        const subscriber = new ROSLIB.Topic({\r\n          ros: ros,\r\n          name: topic,\r\n          messageType: 'std_msgs/Float32'\r\n        });\r\n\r\n        subscriber.subscribe((message) => {\r\n          console.log(`Received message from ${topic}: ${message.data}`);\r\n          setTemperatures(prevTemps => ({\r\n            ...prevTemps,\r\n            [topic]: message.data\r\n          }));\r\n          setLastUpdated(prevTimes => ({\r\n            ...prevTimes,\r\n            [topic]: Date.now()\r\n          }));\r\n        });\r\n\r\n        return subscriber;\r\n      });\r\n\r\n      rosRef.current.subscribers = subscribers;\r\n    };\r\n\r\n    connectToROS();\r\n\r\n    const intervalId = setInterval(() => {\r\n      const currentTime = Date.now();\r\n      setTemperatures(prevTemps => {\r\n        const newTemps = { ...prevTemps };\r\n        Object.keys(lastUpdated).forEach(topic => {\r\n          if (currentTime - lastUpdated[topic] > staleThreshold) {\r\n            newTemps[topic] = 'None';\r\n          }\r\n        });\r\n        return newTemps;\r\n      });\r\n    }, 1000);\r\n\r\n    return () => {\r\n      if (rosRef.current) {\r\n        if (rosRef.current.subscribers) {\r\n          rosRef.current.subscribers.forEach(subscriber => subscriber.unsubscribe());\r\n        }\r\n        rosRef.current.close();\r\n      }\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);  // Empty dependency array to run only once\r\n\r\n  return (\r\n    <div className=\"temperature-display\">\r\n      <h2 className=\"text-center\">Temperature Sensors</h2>\r\n      <ul>\r\n        {Object.entries(temperatures).map(([topic, temp]) => (\r\n          <li key={topic}>\r\n            <strong>{topic}:</strong> {temp === 'None' ? temp : `${temp.toFixed(2)} °C`}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <div className=\"connection-status\">\r\n        {connected ? 'Connected' : 'Disconnected'}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemperatureDisplay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}